'use strict';

// adaptador para inicializar y manejar el cliente de whatsapp-web.js
const { Client, LocalAuth } = require('whatsapp-web.js');

// funcion para crear el cliente de WhatsApp con suscriptores a eventos
function crearClienteWhatsApp(opciones = {}) {
  const {
    // identificador de cliente para la persistencia local
    clientId = 'glitch-bot',
    // callbacks de eventos
    onQr,
    onReady,
    onChangeState,
    onAuthenticated,
    onAuthFailure,
    onDisconnected,
    onMessage
  } = opciones;

  // configuracion de puppeteer por plataforma
  const IS_WINDOWS = process.platform === 'win32';
  const puppeteerConfig = IS_WINDOWS
    ? { headless: true }
    : {
        headless: true,
        args: [
          '--no-sandbox',
          '--disable-setuid-sandbox',
          '--disable-dev-shm-usage',
          '--disable-accelerated-2d-canvas',
          '--no-first-run',
          '--no-zygote',
          '--disable-gpu'
        ]
      };

  // crear cliente con auth local y opciones recomendadas
  const client = new Client({
    authStrategy: new LocalAuth({ 
      clientId,
      dataPath: './config/whatsapp-auth'
    }),
    restartOnAuthFail: true,
    takeoverOnConflict: true,
    takeoverTimeoutMs: 30000,
    qrMaxRetries: 999999,    // Pr√°cticamente infinito para generar c√≥digos QR indefinidamente
    qrRefreshIntervalMs: 30000, // Aumentado a 30 segundos para reducir carga en sistemas de bajos recursos
    puppeteer: {
      headless: true,
      args: [
        '--no-sandbox',
        '--disable-setuid-sandbox',
        '--disable-dev-shm-usage',
        '--disable-accelerated-2d-canvas',
        '--no-first-run',
        '--no-zygote',
        '--disable-gpu',
        '--disable-web-security',
        '--disable-extensions',
        '--disable-features=IsolateOrigins,site-per-process',
        '--disable-site-isolation-trials',
        '--mute-audio',
        '--disable-sync',
        '--js-flags=--expose-gc',
        '--disable-default-apps',
        '--aggressive-cache-discard',
        '--disable-background-networking',
        '--single-process', // Importante para entornos de muy baja memoria
        '--memory-pressure-off',
        '--renderer-process-limit=1'
      ],
      // Ajustes para minimizar uso de memoria
      defaultViewport: { width: 800, height: 600 }, // Viewport m√°s peque√±o
      browserWSEndpoint: null,
      navigationTimeout: 180000, // Timeout m√°s largo para sistemas lentos
      waitUntil: 'networkidle2', // Menos estricto que networkidle0
      ignoreHTTPSErrors: true
    }
  });

  // Variables para control de reconexi√≥n
  let reconnectAttempts = 0;
  const MAX_RECONNECT_ATTEMPTS = 999; // Pr√°cticamente infinito para que siempre intente reconectarse
  let reconnectTimeout = null;

  // Funci√≥n de reinicio con retardo exponencial (modificada para persistir)
  const scheduleReconnect = (reason) => {
    // Eliminar la condici√≥n de m√°ximo n√∫mero de intentos para seguir intentando siempre
    // if (reconnectAttempts >= MAX_RECONNECT_ATTEMPTS) {
    //   console.error('M√°ximo n√∫mero de intentos de reconexi√≥n alcanzado');
    //   if (onDisconnected) onDisconnected(reason, client);
    //   return;
    // }

    // Usar un delay m√°ximo de 30 segundos, pero seguir intentando
    const delay = Math.min(1000 * Math.pow(1.5, Math.min(reconnectAttempts, 8)), 30000);
    console.log(`üîÑ Programando reconexi√≥n en ${delay/1000} segundos (intento ${reconnectAttempts + 1})`);
    
    clearTimeout(reconnectTimeout);
    reconnectTimeout = setTimeout(() => {
      console.log('üîÑ Intentando reconexi√≥n...');
      try {
        if (onChangeState) onChangeState('connecting');
        client.initialize();
        reconnectAttempts++;
        
        // Si los intentos son muchos, reseteamos el contador para evitar delays muy largos
        if (reconnectAttempts > 20) {
          console.log('üîÑ Reseteando contador de intentos para mantener delays razonables');
          reconnectAttempts = 5;
        }
      } catch (error) {
        console.error('‚ùå Error durante la reconexi√≥n:', error);
        scheduleReconnect('error durante reconexi√≥n');
      }
    }, delay);
  };

  // Suscribirse a eventos con manejo mejorado de errores
  
  // Control de tiempo m√°ximo sin recibir QR
  let lastQrTime = Date.now();
  
  // Funci√≥n para verificar si el QR est√° tardando demasiado en actualizarse
  const startQrWatchdog = () => {
    if (client._qrWatchdogTimer) {
      clearTimeout(client._qrWatchdogTimer);
    }
    client._qrWatchdogTimer = setTimeout(() => {
      const now = Date.now();
      const elapsedSinceLastQr = now - lastQrTime;
      
      // Si han pasado m√°s de 5 minutos sin recibir QR, verificar estado antes de forzar reinicio
      // Aumentado a 5 minutos para sistemas con recursos limitados
      if (elapsedSinceLastQr > 300000) {
        console.log('‚ö†Ô∏è QR no actualizado en 5+ minutos, verificando estado de conexi√≥n...');
        try {
          // Verificar si el cliente ya est√° conectado usando cliente._isReady como indicador
          // Tambi√©n usar cualquier otra propiedad que indique que ya tenemos sesi√≥n activa
          const isAuthenticated = client && (
            client._isReady || 
            client.info || 
            client.authState?.state === 'CONNECTED' ||
            client.pupPage !== undefined // Si tenemos p√°gina del navegador es que hay alguna sesi√≥n
          );
          
          if (!isAuthenticated) {
            console.log('üîÑ Cliente no autenticado, reiniciando para forzar nuevo QR');
            client.initialize();
            console.log('üîÑ Cliente reiniciado para forzar nuevo QR');
          } else {
            console.log('‚úÖ Cliente ya est√° conectado, no se forzar√° nuevo QR');
            // Actualizar el tiempo del √∫ltimo QR para evitar verificaciones continuas
            lastQrTime = Date.now();
          }
        } catch (error) {
          console.error('‚ùå Error al verificar estado o forzar reinicio:', error);
          // No programar reconexi√≥n autom√°tica si hay errores, para evitar ciclos infinitos
        }
      }
      
      // Continuar verificando
      startQrWatchdog();
    }, 120000); // Verificar cada 2 minutos en vez de cada minuto
  };
  
  // Iniciar el watchdog para la primera ejecuci√≥n
  startQrWatchdog();
  
  // Almacenar funci√≥n de reinicio del watchdog en el cliente para uso futuro
  client._restartQrWatchdog = startQrWatchdog;
  
  if (onQr) {
    client.on('qr', (qr) => {
      reconnectAttempts = 0; // Resetear intentos cuando se obtiene QR
      lastQrTime = Date.now(); // Actualizar timestamp del √∫ltimo QR
      onQr(qr);
      console.log(`üì± Nuevo c√≥digo QR generado (${new Date().toLocaleTimeString()})`);
    });
  }

  if (onReady) {
    client.on('ready', () => {
      reconnectAttempts = 0; // Resetear intentos cuando est√° listo
      
      // Detener el watchdog de QR cuando estamos listos
      if (client._qrWatchdogTimer) {
        console.log('üõë Deteniendo watchdog de QR ya que el cliente est√° listo');
        clearTimeout(client._qrWatchdogTimer);
        client._qrWatchdogTimer = null;
      }
      
      // Marcar el cliente como listo para referencias futuras
      client._isReady = true;
      
      onReady();
    });
  }

  if (onChangeState) {
    client.on('change_state', (state) => {
      console.log('Cambio de estado WhatsApp:', state);
      onChangeState(state);
    });
  }

  if (onAuthenticated) {
    client.on('authenticated', () => {
      reconnectAttempts = 0; // Resetear intentos al autenticar
      
      // Detener el watchdog de QR cuando ya estamos autenticados
      if (client._qrWatchdogTimer) {
        console.log('üõë Deteniendo watchdog de QR ya que estamos autenticados');
        clearTimeout(client._qrWatchdogTimer);
        client._qrWatchdogTimer = null;
      }
      
      onAuthenticated();
    });
  }

  if (onAuthFailure) {
    client.on('auth_failure', (msg) => {
      console.error('Fallo de autenticaci√≥n:', msg);
      onAuthFailure(msg);
      scheduleReconnect('auth_failure');
    });
  }

  // Manejar desconexiones y errores
  client.on('disconnected', async (reason) => {
    console.log('Cliente desconectado. Raz√≥n:', reason);
    const lowerReason = String(reason || '').toLowerCase();

    // Si la desconexi√≥n viene por cierre desde el tel√©fono (logout), delegar solamente
    // al callback superior para que ejecute exactamente el mismo flujo que el bot√≥n web
    const isPhoneLogout = reason === 'logout' || lowerReason.includes('logout') || lowerReason.includes('phone');
    
    // Detectar casos especiales (UNPAIRED o RegistrationUtils)
    const isUnpaired = reason === 'UNPAIRED' || lowerReason.includes('unpaired');
    const isRegUtilsError = lowerReason.includes('registration') || 
                            reason === 'session_error_detected' || 
                            lowerReason.includes('registration_utils_error');
    
    if (isPhoneLogout) {
      console.log('üì¥ Cierre de sesi√≥n detectado desde tel√©fono. Delegando al manejador superior...');
      if (onDisconnected) onDisconnected('logout', client);
      return; // No hacer ninguna limpieza adicional aqu√≠
    }
    
    // Si es UNPAIRED o error de RegistrationUtils, hacer una limpieza m√°s profunda
    if (isUnpaired || isRegUtilsError) {
      console.log(`‚ö†Ô∏è Detectado ${isUnpaired ? 'estado UNPAIRED' : 'error de RegistrationUtils'}`);
      console.log('üßπ Iniciando limpieza profunda de sesi√≥n y reinicio...');
      
      // Limpiar watchdog si existe
      if (client._qrWatchdogTimer) {
        clearTimeout(client._qrWatchdogTimer);
        client._qrWatchdogTimer = null;
      }
      
      try {
        // Notificar al manejador superior con tipo de error espec√≠fico
        if (onDisconnected) {
          onDisconnected(isUnpaired ? 'unpaired_error' : 'registration_utils_error', client);
        }
        
        // Esperar un momento para asegurarse de que se haya manejado la desconexi√≥n
        setTimeout(async () => {
          try {
            // Reiniciar con sesi√≥n limpia completa
            const { reiniciarClienteConSesionLimpia } = require('./whatsapp');
            await reiniciarClienteConSesionLimpia(client);
          } catch (innerError) {
            console.error('‚ùå Error durante reinicio especial post-desconexi√≥n:', innerError);
            // √öltimo recurso: reconexi√≥n est√°ndar
            scheduleReconnect('special_reconnect_fallback');
          }
        }, 3000);
      } catch (error) {
        console.error('‚ùå Error manejando desconexi√≥n especial:', error);
        scheduleReconnect(reason); // Fallback a reconexi√≥n est√°ndar
      }
      
      return;
    }

    // Para otras razones de desconexi√≥n, intentar reconectar normalmente
    if (onDisconnected) onDisconnected(reason, client);
    scheduleReconnect(reason);
  });

  // Capturar errores no manejados del cliente con mejor manejo de errores de sesi√≥n
  client.on('error', (error) => {
    console.error('‚ùå Error en el cliente de WhatsApp:', error.message || error);
    
    // Almacenar el √∫ltimo error para referencia en otras funciones
    client._lastError = error.message || String(error);
    client._lastErrorTime = Date.now();
    
    // Detectar errores relacionados con la sesi√≥n o el navegador
    const errorMsg = String(error.message || error).toLowerCase();
    
    // Lista de patrones de error que indican problemas con la sesi√≥n
    const sessionErrors = [
      'execution context was destroyed',
      'session',
      'protocol error',
      'browser closed',
      'connection closed',
      'not opened',
      'disconnected',
      'timeout',
      'cannot open browser',
      'browser crashed',
      'terminated',
      'failed to start browser',
      'was detached',
      'target closed',
      'remote object',
      'page crashed'
    ];
    
    // Error espec√≠fico de RegistrationUtils (error com√∫n despu√©s de estado UNPAIRED)
    const isRegUtilsError = errorMsg.includes('registrationutils') || 
                            errorMsg.includes('cannot read properties of undefined') || 
                            (errorMsg.includes('evaluation failed') && errorMsg.includes('typeof'));
    
    // Verificar si el error est√° relacionado con la sesi√≥n
    const isSessionError = sessionErrors.some(pattern => errorMsg.includes(pattern));
    
    if (isRegUtilsError) {
      console.log('‚ö†Ô∏è Detectado error espec√≠fico de RegistrationUtils tras estado UNPAIRED');
      console.log('üßπ Iniciando limpieza de sesi√≥n y reinicio completo...');
      
      // Para este error espec√≠fico, necesitamos una limpieza m√°s profunda
      try {
        // Limpiar watchdog si existe
        if (client._qrWatchdogTimer) {
          clearTimeout(client._qrWatchdogTimer);
          client._qrWatchdogTimer = null;
        }
        
        // Programar reinicio con sesi√≥n limpia tras un breve retraso
        setTimeout(async () => {
          try {
            // Reiniciar con sesi√≥n limpia completa
            const { reiniciarClienteConSesionLimpia } = require('./whatsapp');
            await reiniciarClienteConSesionLimpia(client);
            console.log('üîÑ Cliente reiniciado completamente tras error de RegistrationUtils');
          } catch (innerError) {
            console.error('‚ùå Error durante reinicio especial:', innerError);
            // √öltimo recurso: reconexi√≥n est√°ndar
            scheduleReconnect('registration_utils_error_recovery');
          }
        }, 3000);
      } catch (err) {
        console.error('‚ùå Error durante manejo de RegistrationUtils:', err);
        scheduleReconnect('registration_utils_error_fallback');
      }
    }
    else if (isSessionError) {
      console.log('üîç Detectado error relacionado con la sesi√≥n/navegador');
      console.log('üîÑ Programando reinicio con limpieza de sesi√≥n...');
      
      // Tratar como una desconexi√≥n con sesi√≥n inv√°lida
      client.emit('disconnected', 'session_error_detected');
    } 
    else if (errorMsg.includes('context')) {
      console.log('üîç Detectado error de contexto, intentando reconexi√≥n...');
      scheduleReconnect('context_destroyed');
    }
    else {
      // Para otros errores, intentar reconectar normalmente
      scheduleReconnect('client_error');
    }
  });

  if (onMessage) {
    client.on('message', async (message) => {
      try {
        await onMessage(message);
      } catch (error) {
        console.error('Error procesando mensaje:', error);
      }
    });
  }

  return client;
}

// funcion para iniciar el cliente (conectar y mostrar QR si aplica)
function iniciarCliente(client) {
  client.initialize();
}

// Cerrar sesi√≥n y destruir el cliente de WhatsApp de forma segura
async function logoutClienteWhatsApp(client, cleanSession = true) {
  if (!client) return;
  
  try {
    console.log('üîë Iniciando cierre de sesi√≥n de WhatsApp...');
    
    // Limpiar temporizadores asociados al cliente
    if (client._qrWatchdogTimer) {
      console.log('üßπ Limpiando temporizador de vigilancia QR...');
      clearTimeout(client._qrWatchdogTimer);
      client._qrWatchdogTimer = null;
    }
    
    // Detectar y manejar casos especiales como UNPAIRED o errores de registro
    const isSpecialCase = (client._lastError && 
                          (String(client._lastError).toLowerCase().includes('registrationutils') || 
                           String(client._lastError).toLowerCase().includes('unpaired'))) ||
                          (client.state && client.state === 'UNPAIRED');
                         
    if (isSpecialCase) {
      console.log('‚ö†Ô∏è Detectado caso especial durante logout. Forzando limpieza completa...');
      cleanSession = true; // Forzar limpieza completa
      
      // Registrar diagn√≥stico adicional para este caso
      console.log('üìä Diagn√≥stico de caso especial:');
      if (client._lastError) {
        console.log(`- √öltimo error: ${client._lastError}`);
        console.log(`- Tiempo del error: ${new Date(client._lastErrorTime).toISOString()}`);
      }
      if (client.state) {
        console.log(`- Estado actual del cliente: ${client.state}`);
      }
    }
    
    // Intentar logout si est√° disponible
    if (typeof client.logout === 'function') {
      try {
        await client.logout();
        console.log('‚úÖ Logout ejecutado sobre el cliente.');
      } catch (logoutError) {
        console.error('‚ùå Error durante logout:', logoutError.message);
      }
    }
    
    // Destruir cliente para limpiar recursos locales
    if (typeof client.destroy === 'function') {
      try {
        await client.destroy();
        console.log('‚úÖ Cliente destruido correctamente.');
      } catch (destroyError) {
        console.error('‚ùå Error al destruir cliente:', destroyError.message);
      }
    }
    
    // Limpiar almacenamiento local (LocalAuth) si se solicita
    if (cleanSession) {
      try {
        const fs = require('fs');
        const path = require('path');
        const authPath = path.join(process.cwd(), 'config', 'whatsapp-auth');
        
        if (fs.existsSync(authPath)) {
          console.log(`üßπ Limpiando datos de sesi√≥n en: ${authPath}`);
          
          // Funci√≥n para eliminar directorio recursivamente
          const deleteFolderRecursive = (folderPath) => {
            if (fs.existsSync(folderPath)) {
              fs.readdirSync(folderPath).forEach((file) => {
                const curPath = path.join(folderPath, file);
                if (fs.lstatSync(curPath).isDirectory()) {
                  deleteFolderRecursive(curPath);
                } else {
                  try { fs.unlinkSync(curPath); } catch (e) {}
                }
              });
              try { fs.rmdirSync(folderPath); } catch (e) {}
            }
          };
          
          // Solo eliminar los archivos de sesi√≥n, no toda la carpeta de autenticaci√≥n
          const sessionFolders = fs.readdirSync(authPath)
                                 .filter(f => f.startsWith('session-'))
                                 .map(f => path.join(authPath, f));
          
          for (const folder of sessionFolders) {
            deleteFolderRecursive(folder);
          }
          
          console.log('‚úÖ Datos de sesi√≥n limpiados correctamente');
        }
      } catch (cleanError) {
        console.error('‚ùå Error al limpiar archivos de sesi√≥n:', cleanError.message);
      }
    } else {
      console.log('‚ÑπÔ∏è No se ha solicitado limpieza de datos. La sesi√≥n permanecer√° almacenada.');
    }
    
    return true;
  } catch (error) {
    console.error('‚ùå Error general cerrando sesi√≥n de WhatsApp:', error.message);
    return false;
  }
}

// Reiniciar el cliente con sesi√≥n limpia
async function reiniciarClienteConSesionLimpia(client) {
  if (!client) return false;
  
  try {
    console.log('üîÑ Iniciando reinicio del cliente con limpieza de sesi√≥n...');
    
    // Verificar si es caso especial (UNPAIRED o error de RegistrationUtils)
    const isSpecialCase = (client._lastError && 
                          (String(client._lastError).toLowerCase().includes('registrationutils') || 
                           String(client._lastError).toLowerCase().includes('unpaired'))) ||
                          (client.state && client.state === 'UNPAIRED');
                           
    if (isSpecialCase) {
      console.log('‚ö†Ô∏è Detectado caso especial para reinicio. Realizando limpieza profunda...');
    }
    
    // Limpiar watchdog si existe
    if (client._qrWatchdogTimer) {
      clearTimeout(client._qrWatchdogTimer);
      client._qrWatchdogTimer = null;
    }
    
    // Cerrar sesi√≥n y limpiar datos
    await logoutClienteWhatsApp(client, true);
    
    // Limpiar expl√≠citamente las sesiones del navegador
    try {
      // Intentar limpiar cualquier sesi√≥n de puppeteer residual
      if (client.pupBrowser && typeof client.pupBrowser.close === 'function') {
        await client.pupBrowser.close().catch(e => console.log('Ignorando error al cerrar navegador:', e.message));
      }
      
      if (client.pupPage && typeof client.pupPage.close === 'function') {
        await client.pupPage.close().catch(e => console.log('Ignorando error al cerrar p√°gina:', e.message));
      }
      
      // Limpieza adicional para casos especiales
      if (isSpecialCase) {
        console.log('üßπ Ejecutando limpieza adicional de procesos de Puppeteer...');
        
        // Intentar liberar memoria y forzar recolecci√≥n de basura
        if (global.gc) {
          try {
            global.gc();
            console.log('‚úÖ Recolecci√≥n de basura manual ejecutada');
          } catch (e) {
            console.log('‚ÑπÔ∏è No se pudo forzar recolecci√≥n de basura');
          }
        }
        
        // Liberar cualquier referencia al cliente
        if (client) {
          Object.keys(client).forEach(key => {
            if (key !== 'initialize' && typeof client[key] !== 'function') {
              try {
                client[key] = null;
              } catch (e) {}
            }
          });
        }
      }
    } catch (browserErr) {
      console.log('Ignorando error al cerrar navegador/p√°gina:', browserErr.message);
    }
    
    // Esperar un momento antes de reiniciar (un poco m√°s para casos de UNPAIRED)
    console.log('‚è≥ Esperando 3 segundos antes de reiniciar el cliente...');
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // Reiniciar el cliente
    console.log('üîÑ Reiniciando cliente de WhatsApp...');
    client.initialize();
    
    // Reiniciar el watchdog si estaba configurado
    if (typeof client._restartQrWatchdog === 'function') {
      setTimeout(() => {
        try {
          client._restartQrWatchdog();
          console.log('üîç Watchdog de QR reiniciado correctamente');
        } catch (e) {
          console.error('‚ùå Error al reiniciar watchdog de QR:', e.message);
        }
      }, 5000); // Dar tiempo para inicializaci√≥n
    }
    
    return true;
  } catch (error) {
    console.error('‚ùå Error reiniciando el cliente:', error.message);
    
    // Intento de recuperaci√≥n final si todo falla
    try {
      console.log('üîÑ Intentando recuperaci√≥n final del cliente...');
      setTimeout(() => {
        if (client && typeof client.initialize === 'function') {
          client.initialize();
        }
      }, 5000);
    } catch (finalError) {
      console.error('‚ùå Error en recuperaci√≥n final:', finalError.message);
    }
    
    return false;
  }
}

module.exports = {
  crearClienteWhatsApp,
  iniciarCliente,
  logoutClienteWhatsApp,
  reiniciarClienteConSesionLimpia
};


